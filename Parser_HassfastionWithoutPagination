from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import threading
import queue
import time

import openpyxl
from openpyxl import Workbook,load_workbook
# import xlsxwriter
import os


 # Авторизация на ХассФэсшен 
def AuthorizationForHasfesshen(driver):
    driver.get("https://hassfashion.ru/auth/?login=yes")    
    Auht_Log = driver.find_element(By.NAME, "USER_LOGIN")
    Auht_Log.send_keys('Olga_Guschina@mail.ru')
    Auht_Password = driver.find_element(By.NAME, "USER_PASSWORD")
    Auht_Password.send_keys('optopt')
    Auth_Imp = driver.find_element(By.NAME, "Login")
    Auth_Imp.click()  
    time.sleep(10) 
   

   
#Получение страниц каталога из Экселя
def GettingLinks(LinksLoaded):
    #Создание экземпляра драйвера
    s=Service('G:\\NRU\\SP\\Parsing\\selenium\\chromedriver\\win64\\136.0.7103.92\\chromedriver.exe')
    driver = webdriver.Chrome(service=s)
    # Обращение к эксель файлу
    file_path = "G:\\NRU\\SP\\Parsing\\TestSelenium\\TestSelenium\\HassCatalog.xlsx"  
    wb = load_workbook(file_path)
    ws = wb.active 
    LinkPages = [] 
    LinksNotLoaded = True
    last_collection = ws[2][0].value  
    for row in range(2, ws.max_row+1):  
        current_collection = ws[row][0].value 
        if current_collection == None: break  
        if last_collection !=  current_collection : 
            ParsingColltction(driver, LinksNotLoaded, LinksLoaded, LinkPages, last_collection)             
        LinkPages.append(ws[row][2].value) 
        last_collection = current_collection
               
    # lastest_collection = ws.cell(row=ws.max_row, column=1).value
    ParsingColltction(driver, LinksNotLoaded, LinksLoaded, LinkPages, last_collection)
    
    driver.quit() 

def ParsingColltction(driver, LinksNotLoaded, LinksLoaded, LinkPages, last_collection):
   print(f'GettingLinks: Начат сбор ссылок для коллекции {last_collection}')   
   Links = [] 
   for LinkPage in LinkPages:  
        print("LinkPage=",LinkPage)
        driver.get(LinkPage)         
        time.sleep(5) 
        # Отбор товаров в наличие                        
        OnSales = driver.find_elements(By.XPATH, "//div[@class='res_cards']/div[not(@style)]") 
        for OnSale in OnSales:   
            a = OnSale.find_element(By.TAG_NAME, "a")
            Links.append(a.get_attribute("href"))                                           
   LinkPages.clear()        
   print(f'GettingLinks: Закончен сбор ссылок для коллекции {last_collection}')  
   GoodsLinksQueue.put((last_collection, Links))
   if  LinksNotLoaded:
         with LinksLoaded:
            LinksLoaded.notify() 
            LinksNotLoaded = False     
     
class TabInd:
            NAME = 0
            ARTICLE = 1
            BRAND = 2
            PRICE = 3
            SIZE = 4
            DESCRIPTION = 5
            PHOTO = 6
            LINK = 7  

#Парсинг страницы товара
def ParsingGoods(LinksLoaded, driver):
  
  Goods = []
  Video = []
  
  print ("ParsingGoods Ожидание")
  with LinksLoaded:
        LinksLoaded.wait()
  print ("ParsingGoods Старт")   

  while not GoodsLinksQueue.empty():  
     CollectionName, Links = GoodsLinksQueue.get()
     print(f'ParsingGoods: Начат сбор данных товаров по коллекции {CollectionName}')  
     # Сбор данных со страницы товара в структуры и запись в список 
     
     for Link in Links:
        driver.get(Link)         
        #Имя
        Name1 = driver.find_element(By.XPATH,"//div[@class ='title h3 mobile']").get_attribute("innerText")
        Color = driver.find_element(By.XPATH,"//div[@class ='df jcsb rel']/span[2]").get_attribute("innerText")
        Name = f"{Name1} {Color}"
        #Артикл
        Article = driver.find_element(By.XPATH,"//div[@class ='vendor df jcsb']/span[2]").get_attribute("innerText")
        #Цена
        Price = driver.find_element(By.XPATH,"//span[@class='price']").get_attribute("innerText").strip("₽").replace("\xa0","")
        #Размер
        SizeList = []
        Sizes = driver.find_elements(By.XPATH,"//div[contains(@class,'offer-size size df aic jcc txt_bolder')][not(contains(@class,'disable'))]")
        if Sizes == []: Size = "-"
        else:
            for Siz in Sizes: SizeList.append(Siz.get_attribute("innerText")) 
            Size = ", ".join(SizeList) + "."    
        # Описание 
        Description = "" 
        symbols = "АВ:"
        for sbl in symbols:
             Composition = driver.find_element(By.XPATH,"//span[@class='compound txt_bolder']").get_attribute("innerText").replace(sbl, "") 
        try:
             Discript = driver.find_element(By.XPATH,"//span[@class='description_text txt typing']").get_attribute("innerText")   
        except:
            Discript = " Состав: "
        Description = Discript + " " + Composition 
        #Картинки
        Picture = []
        Pictures = driver.find_elements(By.XPATH,"//div[@class ='miniatures_item df fdc']//img")
        # Video.append(Pictures[0].get_attribute("src"))
        if len(Pictures) > 5:
            for index, Pict in enumerate(Pictures):
                if index > 0:           
                    if index % 2 != 0:
                         Picture.append(Pict.get_attribute("src"))
        else: 
             for index, Pict in enumerate(Pictures):
                if index > 0:    
                    Picture.append(Pict.get_attribute("src"))    
        # Запись данных в экземляр структуры StructureOfProducts    
        StructureOfProduct = {
            TabInd.NAME : Name,
            TabInd.ARTICLE : Article,
            TabInd.BRAND : 'Hassfastion',
            TabInd.PRICE : Price, 
            TabInd.SIZE :Size,
            TabInd.DESCRIPTION : Description,
            TabInd.PHOTO : Picture,
            TabInd.LINK : Link,
            }
        # Запись структуры в список   
        Goods.append(StructureOfProduct)       
     # Передаем Goods 
     print(f'ParsingGoods: Сбор данных товаров по коллекции {CollectionName} завершен')
     RecordingToExcel(Goods, CollectionName)
     Goods.clear()
     
    
